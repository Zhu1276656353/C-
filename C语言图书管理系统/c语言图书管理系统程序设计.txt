#define _CRT_SECURE_NO_WARNINGS     //程序内扩曾问题 
#include <stdio.h>
#include <stdlib.h>    //处理动态链表的函数 
#include <string.h>    //字符串处理函数 
 //链表
struct bookInfo
{
	char name[20];
	float price;
	int num;
	char author[20];
	int booknum;
};

struct Node
{
	struct bookInfo data;
	struct Node *next; 
};
 struct Node *list=NULL;     //
//创建表头；表头就是一个结构体变量、
struct Node *createHead()
{
	//动态内存申请
	struct Node *headNode = (struct Node*)malloc(sizeof(struct Node));
	headNode->next = NULL;
	return headNode; 
}

//创建节点，为插入做准备
struct Node *createNode(struct bookInfo data)
{
	struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data  = data;
	newNode->next = NULL;
	return newNode;
}

//表头插入
void insertNodeByHead(struct Node *headNode,struct bookInfo data)

{
	struct Node *newNode = createNode(data);
	newNode->next = headNode->next;
	headNode->next = newNode; 
} 

//指定删除
void deleteNodeByName(struct Node *headNode, char *bookName) 
{
	struct Node *posLeftNode = headNode;
    struct Node *posNode = headNode->next ;
    while(posNode != NULL && strcmp(posNode->data .name,bookName))
	{
		posLeftNode = posNode;
		posNode = posLeftNode->next;
	}
	//讨论查找结果
	if(posNode == NULL)
       return;
    else
	{
		posLeftNode->next = posNode->next ;
		free(posNode);
		posNode = NULL ;
    }   
}

   //遍历链表 
struct Node *searchByName(struct Node *headNode, char *bookName)
{
	struct Node *posNode = headNode->next;
	while (posNode !=NULL && strcmp(posNode->data.name,bookName))
	{
		posNode = posNode->next;
	}
	return posNode;
}

//打印 
void printList(struct Node *headNode)
{
	struct Node *pMove = headNode->next ;
	printf("书名\t价格\t数量\t作者\t编号\n");
	while (pMove!=NULL)
	{
	    printf("%s\t%.1f\t%d\t%s\t%d\n",pMove->data.name, pMove->data.price, pMove->data.num, pMove->data.author,pMove->data.booknum );
		pMove = pMove->next;
	}
}



  //菜单模块
void menu()
{
	printf("---------------------------------------\n");
	printf("    合肥经济学院图书管理系统\n"        );
	printf("\t0.退出系统\n"); 
	printf("\t1.登记书籍\n"); 
	printf("\t2.浏览书籍\n"); 
	printf("\t3.借阅书籍\n"); 
	printf("\t4.归还书籍\n"); 
	printf("\t5.删除书籍\n"); 
	printf("\t6.书籍排序\n");  
	printf("\t7.查找书籍\n"); 
	printf("----------------------------------------\n");
	printf("请输入(0-7):\n");            
}
 
  //文件操作
  //存操作 
 void saveInfoToFile(const char *fileName, struct Node *headNode)
 {
 	FILE *fp = fopen(fileName, "w");
 	struct Node *pMove = headNode->next ;
 	while(pMove != NULL)
 	{
 		fprintf(fp,"%s\t%.1f\t%d\t%s\t%d\n" ,pMove->data.name ,pMove->data.price ,pMove->data.num,pMove->data.author,pMove->data.booknum );
 		pMove = pMove->next;
	}
	fclose(fp);
 }
 
 //读操作 
void readInfoFromFile(const char *fileName, struct Node *headNode) 
{
	FILE *fp = fopen(fileName, "r");
	if (fp ==NULL)
	{
		fp = fopen(fileName, "w+");
	}
	struct bookInfo tempData;
	while(fscanf(fp," %s\t%f\t%d\t%s\t%d\n",tempData.name ,&tempData.price ,&tempData.num,tempData.author,&tempData.booknum) !=EOF)
	{
		insertNodeByHead(list, tempData);
	}
	fclose(fp); 
}
	
//排序
void bubbleSortList(struct Node *headNode)
{
	for(struct Node *p = headNode->next ;p != NULL;p =p->next )
	{
		for(struct Node *q = headNode->next ;q->next != NULL;q =q->next )
		{
			if(q->data.price > q->next->data.price )
			{
				struct bookInfo tempData = q->data;
				q->data = q->next->data;
				q->next->data = tempData; 
			}
		}
	}
	printList(headNode);
}
 
 
  //做交互（控制） 
void keydown() 
  {
	int userkey = 0;
	struct bookInfo tempBook; //产生一个临时变量储存书籍信息 
	struct Node *result = NULL;
	  
	scanf("%d",&userkey);
	switch(userkey)
	{
		case 0:
		    printf("[ 退出 ]\n");
			printf("退出成功\n");
			system("pause");
			exit(0);
			break;
		case 1:printf("[ 登记 ]\n");
			   printf("请输入录入书籍的信息(name,price,num,author,booknum):\n");
			   scanf("%s%f%d%s%d",tempBook.name ,&tempBook.price ,&tempBook.num,tempBook.author,&tempBook.booknum);
			   insertNodeByHead(list, tempBook);
			   saveInfoToFile("bookinfo.txt",list);
			   break;
		case 2:printf("[ 浏览 ]\n");
		       printList(list);
		       break;
		case 3:printf("[ 借阅 ]\n");
		       printf("请输入借阅书名：\n");
		       scanf("%s",tempBook.name );
		       result = searchByName(list,tempBook.name );
		       if (result==NULL)
		       {
		       	printf("没有找到相关书籍。\n");
			   }
			   else
			   {
			   	if (result->data.num >0)
			   	{
			   		result->data.num--;
			   		printf("借阅成功！\n");
				}
				else
				{
					printf("当前书籍无库存，借阅失败！\n"); 
				}
			   }
		       break; 
		case 4:printf("[ 归还 ]\n");
		       printf("请输入归还的书名：\n");
		       scanf("%s",tempBook.name );
		       result = searchByName(list,tempBook.name );
		       if (result==NULL)
		       {
		       	printf("该书来源非法。\n");
			   }
			   else
			   {
			   	result->data.num++;
			   	printf("归还成功！\n");
			   }
		       break;
		case 5:printf("[ 删除 ]\n");
	           printf("请输入要删除的书名：\n");
			   scanf("%s",tempBook.name );
			   deleteNodeByName(list,tempBook.name );
			   saveInfoToFile("bookinfo.txt",list);
		       break;
		case 6:printf("[ 排序 ]\n");
		       bubbleSortList(list);
		       break;
		case 7:printf("[ 查找 ]\n");
		       printf("请输入要查找书籍的书名：\n");
		       scanf("%s",tempBook.name );
		       result = searchByName(list,tempBook.name);
		       if(result == NULL)
		       {
		       	printf("未找到相关信息！\n");
			   }
			   else
			   {
			   	printf("书名\t价格\t数量\t作者\t编号\n");
			   	printf("%s\t%.1f\t%d\t%s\t%d\n",result->data.name, result->data.price, result->data.num,result->data.author,result->data.booknum);
			   }
		       break;
		default:printf("输入错误\n");
		       break;
		
	}
 }  

    //主函数 
int main()
{
    list = createHead();
    readInfoFromFile("bookinfo.txt",list);
	while (1)
	{
	
	    menu();
 	    keydown();
	    system("pause");
	    system("cls");
	}
	system("pause");
	return 0;
} 